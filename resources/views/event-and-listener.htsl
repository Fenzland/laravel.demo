@extend( ./layout )
@section( main )
	-article
		-h2
			事件與監聽器
		-p
			事件監聽機制，是減少代碼耦合的一大利器，應用場景十分廣泛。例如商城系統的訂單支付，在支付完成後，
			除了請求數據庫將訂單狀態改變以外，還需要給用戶發送下單成功通知，給商家發送發貨通知，並預支庫存。
			此外，還有可能需要記錄用戶的累計消費金額，並判斷是否升級爲 VIP；檢查是否有購物贈券的活動，並發放相應的優惠券等等。
			在事件機制出現之前，我們是這樣設計的：在訂單支付完成的方法中，處理完訂單狀態後，依次處理上述操作。
			最後，我們發現我們的訂單處理類管得特別寬，處理着千奇百怪的事務。忍無可忍後，我們開始重構，將以上任務分別封裝，
			仍舊在訂單完成後調用。事情有所好轉，但這個訂單處理類中，依然有不相干的代碼，仍舊依賴着許多其它的類，耦合還在。
			這讓這個訂單類難以被復用。有了事件機制，情況就不同了。訂單完成後，我們發出一個訂單完成事件，不用管接下來具體要幹什麼。
			而框架，則在事件被觸發後，依次調用事先聲明過的監聽器。訂單的完成，和訂單完成後要做的事情之間，耦合降到了最低。
		-p
			Laravel 中，我們可以很方便地創建一個事件和一個監聽器。
		-code(bash){>
			 artisan  make:event EventClassName
			 artisan  make:Listener ListenerClassName
		<}
		-p
			生成的類在
			-
			-code
				app/Events/
			-
			-code
				app/Listeners/
			-
			兩個目錄中。
		-p
			然後，我們需要在
			-
			-code
				App\Providers\EventServiceProvider
			-
			類中註冊註冊事件與監聽者。
		-p
			最後，在需要的地方觸發事件即可。
		-code(php){>
			 event( new EventClassName() )
		<}
		-p
			默認情況下，事件觸發監聽器，是同步行爲。若監聽器執行的是耗時任務，則會影響性能。此時可使用異步事件。
			讓監聽器實現
			-
			-code
				ShouldQueue
			-
			接口，將在隊列中執行，達到異步執行的目的。
